---
import { ESO_API_URL } from "@/consts";
import { md2html, md2text } from "@/utils";
import ArticleLayout from "@/layouts/ArticleLayout.astro";
import { Price } from "@/components/Price";

const { id } = Astro.params;

/** 物品 */
async function getItem() {
  const query = new URLSearchParams();
  query.set("populate", "*");

  const response = await fetch(`${ESO_API_URL}/api/items/${id}?${query}`);
  return await response.json();
}

const { data } = await getItem();

// 当请求 tooltip 的时候，返回 json 数据
if (Astro.request.headers.get("x-request-for") === "tooltip") {
  if (data == null) {
    return new Response(JSON.stringify({}), {
      headers: {
        "content-type": "application/json",
      },
    });
  }

  const result = {
    name: data.attributes.name,
    nameEn: data.attributes.nameEn,
    icon: data.attributes.icon,
    type: data.attributes.type,
    enchantName: data.attributes.enchantName,
    enchantDesc: data.attributes.enchantDesc,
    trait: data.attributes.trait,
    traitDesc: data.attributes.traitDesc,
    traitAbilityDesc: data.attributes.traitAbilityDesc,
    craftType: data.attributes.craftType,
    armorType: data.attributes.armorType,
    weaponType: data.attributes.weaponType,
    equipType: data.attributes.equipType,
    specialType: data.attributes.specialType,
    style: data.attributes.style,
    description: data.attributes.description,
  };

  return new Response(JSON.stringify(result), {
    headers: {
      "content-type": "application/json",
    },
  });
}

if (data == null) {
  return new Response(null, {
    status: 404,
    statusText: "Not found",
  });
}

let content = [`**${data.attributes.name}**是上古卷轴OL的一个[物品](/item)，`];

switch (data.attributes.type) {
  case "武器":
    content.push(`它是一个`);
    data.attributes.style && content.push(`${data.attributes.style}风格的`);
    content.push(`${data.attributes.weaponType}武器，`);

    if (data.attributes.set.data) {
      content.push(
        `它是<a href="/set/${data.attributes.set.data.attributes.slug}">${data.attributes.set.data.attributes.name}</a>套装的一部分。`
      );
    }

    break;
  case "护甲":
    content.push(`它是一个`);
    data.attributes.style && content.push(`${data.attributes.style}风格的`);
    content.push(`${data.attributes.armorType}护甲，`);
    content.push(`可以用来保护玩家的${data.attributes.equipType}。`);

    if (data.attributes.trait) {
      content.push(
        `${data.attributes.name}的默认特质是${data.attributes.trait}。`
      );
    }

    if (data.attributes.set.data) {
      content.push(
        `它是<a href="/set/${data.attributes.set.data.attributes.slug}">${data.attributes.set.data.attributes.name}</a>套装的一部分。`
      );
    }

    break;
  case "武器特质":
  case "护甲特质":
  case "珠宝特质":
    content.push(`它是一个`);
    content.push(`具有${data.attributes.trait}效果的`);
    content.push(`${data.attributes.specialType}。`);
    break;
  default:
    content.push(`它是一个${data.attributes.type}。`);
    break;
}

const BIND_TYPES: Record<string, string> = {
  0: "未绑定",
  1: "角色绑定",
  2: "账户绑定",
  3: "账户绑定",
};

const meta = [
  { name: "名称", content: data.attributes.name },
  { name: "英文", content: data.attributes.nameEn },
  { name: "绑定类型", content: BIND_TYPES[data.attributes.bindType] },
  { name: "类型", content: data.attributes.type },
  { name: "等级", content: data.attributes.level },
  { name: "品质", content: data.attributes.quality },
  { name: "价值", content: data.attributes.value },
  { name: "是否唯一", content: data.attributes.isUnique ? "是" : null },
  {
    name: "是否只能装备一件",
    content: data.attributes.isUniqueEquipped ? "是" : null,
  },
  { name: "是否垃圾", content: data.attributes.isVendorTrash ? "是" : null },
  { name: "是否破损", content: data.attributes.isArmorDecay ? "是" : null },
  { name: "是否消耗品", content: data.attributes.isConsumable ? "是" : null },
].filter((item) => item.content != null && item.content !== "");
---

<ArticleLayout
  name={data.attributes.name}
  nameEn={data.attributes.nameEn}
  description={md2text(data.attributes.description)}
  type="物品"
  meta={meta}
>
  <img
    class="float-right ml-4"
    src={data.attributes.icon}
    alt=""
    width="64"
    height="64"
  />
  <blockquote set:html={md2html(data.attributes.description)} />
  <Fragment set:html={md2html(content.join(""))} />

  <!-- {
    data.attributes.prices.data && (
      <>
        <h3 id="price">价格</h3>
        <div class="block w-full h-80">
          <Price data={data.attributes.prices.data} client:load />
        </div>
      </>
    )
  } -->
</ArticleLayout>
