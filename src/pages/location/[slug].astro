---
import { CDN_URL, ESO_API_URL } from "@/consts";
import { md2html } from "@/utils";
import type { MapData, PoiData } from "@/types";
import ArticleLayout from "@/layouts/ArticleLayout.astro";

const { slug } = Astro.params;

/** 区域 */
async function getZone(slug: string) {
  const query = new URLSearchParams();
  query.set("pagination[pageSize]", "1");
  query.set("pagination[page]", "1");
  query.set("filters[slug][$eq]", slug!);
  query.set("populate", "*");

  const response = await fetch(`${ESO_API_URL}/api/zones?${query}`);
  const result = await response.json();
  const data = result?.data[0];

  return data;
}

/** 地图 */
async function getMap(id: number): Promise<MapData | Record<string, any>> {
  const response = await fetch(`${CDN_URL}/maps/${id}.json`);

  if (response.status === 404) {
    return {};
  }

  return response.json();
}

const data = await getZone(slug!);

if (data == null) {
  return new Response(null, {
    status: 404,
    statusText: "Not found",
  });
}

const name = data.attributes.subZoneName || data.attributes.zoneName;
const nameEn = data.attributes.subZoneNameEn || data.attributes.zoneNameEn;

const { pois = [], paths = [], file } = await getMap(data.attributes.mapId);

const POIs = [
  ["洞穴", "Delves", pois.filter((x: PoiData) => x.type === 4)],
  ["兴趣点", "Points of Interest", pois.filter((x: PoiData) => x.type === 1)],
  ["标志性地点", "Striking Locales", pois.filter((x: PoiData) => x.type === 2)],
  ["套装铸造点", "Set Stations", pois.filter((x: PoiData) => x.type === 13)],
  ["试炼", "Trial", pois.filter((x: PoiData) => x.type === 6)],
  ["单人试炼", "Solo Trial", pois.filter((x: PoiData) => x.type === 7)],
  ["公开地牢", "Public Dungeons", pois.filter((x: PoiData) => x.type === 8)],
  ["组队地牢", "Group Dungeons", pois.filter((x: PoiData) => x.type === 3)],
  ["世界头目", "World Bosses", pois.filter((x: PoiData) => x.type === 5)],
  ["组队头目", "Group Bosses", pois.filter((x: PoiData) => x.type === 21)],
  ["房屋", "Player Houses", pois.filter((x: PoiData) => x.type === 14)],
  ["路点神龛", "Wayshrines", pois.filter((x: PoiData) => x.type === 10)],
  ["天空碎片", "Skyshards", pois.filter((x: PoiData) => x.type === 16)],
  // ["书籍", "Books", pois.filter((x: PoiData) => x.type === 22)],
].filter((x) => x[2].length > 0) as [string, string, PoiData[]][];

const meta = [
  { name: "名称", content: name },
  { name: "英文", content: nameEn },
  { name: "地区剧情任务", content: "-" },
];

function slugId(en: string) {
  return en.toLowerCase().replaceAll(" ", "-");
}

for (let poi of POIs) {
  meta.push({
    name: poi[0],
    content: `<a href="#${slugId(poi[1])}">${poi[2].length}</a>`,
  });
}

meta.push({
  name: "",
  content: `<a href="/map/${data.attributes.mapId}" target="_blank"><img src="${CDN_URL}/${file}?imageView2/2/w/200/q/85" width="200" alt="" /></a>`,
});
---

<style is:inline>
  .markdown-body img.thumb + p:after {
    content: "";
    display: block;
    clear: both;
  }
</style>

<ArticleLayout name={name} nameEn={nameEn} type="区域" meta={meta}>
  {
    data.attributes.thumb && (
      <img
        class="thumb float-left w-5/12 mr-4"
        src={`${data.attributes.thumb}?imageView2/2/w/400/q/85`}
        width="400"
        alt=""
      />
    )
  }

  <Fragment set:html={md2html(data.attributes.description)} />
  <Fragment set:html={md2html(data.attributes.content)} />

  {
    paths.length > 0 && (
      <>
        <h2>
          地点 <small class="text-gray-500">Places</small>
        </h2>
        <ul>
          {paths.map((x: any) => (
            <li>
              <a href={`/map/${x.map_id}`}>
                <img
                  class="inline-flex"
                  src={`${CDN_URL}/esoui/art/icons/poi/poi_city_complete.png`}
                  width="18"
                  height="18"
                  alt=""
                />
                {x.name}
              </a>
            </li>
          ))}
        </ul>
      </>
    )
  }

  {
    POIs.map(
      ([zh, en, pois]) =>
        pois.length > 0 && (
          <>
            <h2 id={slugId(en)}>
              {zh} <small class="text-gray-500">{en}</small>
            </h2>
            <ul>
              {pois.map((x) => (
                <li>
                  <img
                    class="inline-flex"
                    src={`${CDN_URL}${x.icon}`}
                    width="18"
                    height="18"
                    alt=""
                  />
                  <a href={`/map/${x.map_id}?poi=${x.id}`}>{x.name}</a>
                </li>
              ))}
            </ul>
          </>
        )
    )
  }
</ArticleLayout>
