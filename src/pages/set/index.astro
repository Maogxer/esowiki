---
import HeaderNav from "@/components/HeaderNav.astro";
import HeaderMeta from "@/components/HeaderMeta.astro";
import ScrollToTop from "@/components/ScrollToTop.astro";
import Footer from "@/components/Footer.astro";
import Pagination from "@/components/Pagination.astro";
import { SITE_TITLE, SITE_DESCRIPTION, ESO_API_URL, CDN_URL } from "@/consts";
import "@/styles/global.css";

let page = Astro.url.searchParams.get("page") || 1;
const type = Astro.url.searchParams.get("type") || "";
const slot = Astro.url.searchParams.get("slot") || "";
const buff = Astro.url.searchParams.get("buff") || "";
const q = Astro.url.searchParams.get("q") || "";

async function getBuffs() {
  const query = new URLSearchParams();
  query.set("sort[0]", "id:asc");
  query.set("populate", "*");
  query.set("pagination[pageSize]", "100");
  query.set("filters[$or][0][type][$eq]", "Buff");
  query.set("filters[$or][1][type][$eq]", "Debuff");
  query.set("filters[$and][0][sets][id][$notNull]", "true");

  const response = await fetch(`${ESO_API_URL}/api/buffs?${query}`);
  const result = await response.json();
  return result?.data;
}

if (!/^\d+$/.test(page as string)) {
  page = 1;
}

const query = new URLSearchParams();
query.set("pagination[pageSize]", "20");
query.set("pagination[page]", page as string);
if (q) {
  query.set("filters[$or][0][name][$containsi]", q);
  query.set("filters[$or][1][nameEn][$containsi]", q);
}
if (type) query.set("filters[type][$eq]", type);
if (buff) query.set("filters[buffs][slug][$eq]", buff);

const response = await fetch(`${ESO_API_URL}/api/set-summaries?${query}`);
const result = await response.json();

if (result.error) {
  return new Response(result.error.message, {
    status: result.error.status,
    statusText: result.error.message,
  });
}

const {
  data = [],
  meta: { pagination },
} = result;

const buffs = await getBuffs();

const typeList = [
  "制造",
  "地图",
  "地下城",
  "怪物",
  "试炼",
  "竞技场",
  "神话",
  "PVP",
  "其它",
];

const slotList = ["轻甲", "中甲", "重甲", "武器", "首饰"];
---

<html lang="zh-CN">
  <head>
    <HeaderMeta title={`套装 - ${SITE_TITLE}`} description={SITE_DESCRIPTION} />
    <link rel="stylesheet" href={`${CDN_URL}/assets/gfm-fba346.css`} />
  </head>

  <body>
    <HeaderNav />

    <main class="max-w-screen-xl mx-auto">
      <h1 class="text-2xl font-bold">套装</h1>
      <form id="form-set" action="" class="py-5">
        <div class="grid grid-cols-8 gap-4">
          <div class="col-span-8 sm:col-span-2">
            <input
              type="search"
              name="q"
              id="q"
              autocomplete="off"
              placeholder="搜索套装名称(支持中文名和英文名)"
              value={q}
              class="filter mt-1 block w-full rounded-md border border-gray-300 py-2 px-3 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
            />
          </div>
          <div class="col-span-8 sm:col-span-2">
            <select
              id="type"
              name="type"
              class="filter mt-1 block w-full rounded-md border border-gray-300 py-2 px-3 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
            >
              <option value="">所有类型</option>
              {typeList.map((x) => <option selected={x === type}>{x}</option>)}
            </select>
          </div>
          <div class="col-span-8 sm:col-span-2">
            <select
              id="slot"
              name="slot"
              class="filter mt-1 block w-full rounded-md border border-gray-300 py-2 px-3 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
            >
              <option value="">所有部位</option>
              {slotList.map((x) => <option selected={x === slot}>{x}</option>)}
            </select>
          </div>
          <div class="col-span-8 sm:col-span-2">
            <select
              id="buff"
              name="buff"
              class="filter mt-1 block w-full rounded-md border border-gray-300 py-2 px-3 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
            >
              <option value="">所有增益</option>
              {
                buffs.map((x: any) => (
                  <option
                    selected={x.attributes.slug === buff}
                    value={x.attributes.slug}
                  >
                    {x.attributes.name}
                  </option>
                ))
              }
            </select>
          </div>
        </div>
      </form>
      <Pagination {...pagination} />
      <div class="markdown-body w-full">
        <table class="w-full shadow">
          <thead class="whitespace-nowrap">
            <tr>
              <th class="w-24">图标</th>
              <th class="w-44">名称</th>
              <th class="w-20">类型</th>
              <th>套装效果</th>
            </tr>
          </thead>
          <tbody>
            {
              data.map(({ id, attributes }: any) => (
                <tr>
                  <td class="text-center">
                    <img
                      data-set="hello world"
                      src={attributes.icon}
                      width="64"
                      height="64"
                      alt=""
                    />
                  </td>
                  <td class="text-center">
                    <a class="no-tooltip" href={`/set/${attributes.slug}`}>
                      {attributes.name}
                    </a>
                    <div class="text-xs">{attributes.nameEn}</div>
                  </td>
                  <td class="text-center">{attributes.type}</td>
                  <td
                    set:html={Array(7)
                      .fill(0)
                      .map((_, i) => attributes[`setBonusDesc${i + 1}`])
                      .filter(Boolean)
                      .join("<br/>")}
                  />
                </tr>
              ))
            }
          </tbody>
        </table>
      </div>
      <Pagination {...pagination} />
    </main>
    <ScrollToTop />
    <Footer />
    <script>
      const form = document.getElementById("form-set") as HTMLFormElement;
      const els = form.querySelectorAll(".filter");
      els.forEach((el) => {
        el.addEventListener("change", () => {
          form.submit();
        });
      });
    </script>
  </body>
</html>
