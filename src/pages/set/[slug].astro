---
import { ESO_API_URL, CDN_URL } from "@/consts";
import ArticleLayout from "@/layouts/ArticleLayout.astro";
import _ from "lodash";

const { slug } = Astro.params;

const query = new URLSearchParams();
query.set("pagination[pageSize]", "1");
query.set("pagination[page]", "1");
query.set("filters[slug][$eq]", slug!);
query.set("populate", "*");

const response = await fetch(`${ESO_API_URL}/api/set-summaries?${query}`);

const { data } = await response.json();

// 当请求 tooltip 的时候，返回 json 数据
if (Astro.request.headers.get("x-request-for") === "tooltip") {
  if (data == null || data.length === 0) {
    return new Response(JSON.stringify({}), {
      headers: {
        "content-type": "application/json",
      },
    });
  }

  const { attributes } = data[0];
  const result = {
    name: attributes.name,
    nameEn: attributes.nameEn,
    icon: attributes.icon,
    type: attributes.type,
    description: Array(7)
      .fill(0)
      .map((_, i) => attributes[`setBonusDesc${i + 1}`])
      .filter(Boolean)
      .join("<br>"),
  };

  return new Response(JSON.stringify(result), {
    headers: {
      "content-type": "application/json",
    },
  });
}

if (data == null || data.length === 0) {
  return Astro.redirect("/404");
}

const { attributes } = data[0];

const items = _.uniqBy(attributes.items.data, "attributes.name");

const meta = [
  { name: "名称", content: attributes.name },
  { name: "英文", content: attributes.nameEn },
  {
    name: "类型",
    content: `<a href="/set?type=${attributes.type}">${attributes.type}</a>`,
  },
  { name: "部件数量", content: items.length },
  { name: "地点", content: attributes.location },
  { name: "套装部位", content: attributes.itemSlots },
];
---

<ArticleLayout
  name={attributes.name}
  nameEn={attributes.nameEn}
  description={`${attributes.name}是上古卷轴 OL 的一套${attributes.type}套装，套装共包含 ${items.length} 个部件。`}
  type="套装"
  meta={meta}
>
  <p>
    <abbr title={attributes.nameEn}>{attributes.name}</abbr>是上古卷轴 OL 的一套<a
      href={`/set?type=${attributes.type}`}>{attributes.type}</a
    >套装，可以在 {attributes.location ?? "?"} 区域获得。
  </p>
  <p>
    <strong>套装效果</strong>:
  </p>
  <ul>
    {
      Array(7)
        .fill(0)
        .map((_, i) => attributes[`setBonusDesc${i + 1}`])
        .filter(Boolean)
        .map((x) => <li>{x}</li>)
    }
  </ul>
  <p>
    {attributes.name}套装共包含 <code>{items.length}</code> 个部件：
    <div class="flex gap-1 flex-wrap mt-5">
      {
        items.map((x: any) => (
          <a href={`/item/${x.id}`}>
            <img
              class="hover:shadow-lg transition-shadow duration-450 ease-in-out"
              width="64"
              height="64"
              alt={x.attributes.name}
              src={x.attributes.icon}
            />
          </a>
        ))
      }
    </div>
  </p>
</ArticleLayout>
