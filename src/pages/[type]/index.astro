---
import HeaderNav from "@/components/HeaderNav.astro";
import HeaderMeta from "@/components/HeaderMeta.astro";
import { SITE_TITLE, SITE_DESCRIPTION, CDN_URL, ESO_API_URL } from "@/consts";
import Footer from "@/components/Footer.astro";
import ScrollToTop from "@/components/ScrollToTop.astro";
import Pagination from "@/components/Pagination.astro";

const { type } = Astro.params;

let page = Astro.url.searchParams.get("page") || 1;

if (!/^\d+$/.test(page as string)) {
  page = 1;
}

/** 分类 */
async function getType(slug?: string) {
  const query = new URLSearchParams();
  query.set("pagination[pageSize]", "1");
  query.set("pagination[page]", "1");
  query.set("filters[slug][$eq]", slug!);

  const response = await fetch(`${ESO_API_URL}/api/article-types?${query}`);
  const result = await response.json();

  return result.data[0];
}

/** 文章 */
async function getArticles(type: string) {
  const query = new URLSearchParams();
  query.set("pagination[pageSize]", "20");
  query.set("pagination[page]", page as string);
  query.set("filters[type][id][$eq]", type);
  query.set("populate", "*");
  query.set("sort[0]", "id:desc");

  const response = await fetch(`${ESO_API_URL}/api/articles?${query}`);
  return await response.json();
}

const typeData = await getType(type);

if (typeData == null) {
  return new Response(null, {
    status: 404,
    statusText: "Not found",
  });
}

const {
  data: articles,
  meta: { pagination },
} = await getArticles(typeData.id);
---

<html lang="zh-CN">
  <head>
    <HeaderMeta
      title={`${typeData.attributes.name} - ${SITE_TITLE}`}
      description={SITE_DESCRIPTION}
    />
    <link rel="stylesheet" href={`${CDN_URL}/assets/gfm-fba346.css`} />
  </head>

  <body>
    <HeaderNav />
    <main class="max-w-screen-xl mx-auto">
      <article class="p-6">
        <div class="markdown-body">
          <h1>
            {typeData.attributes.name}
            <small class="text-gray-500">{typeData.attributes.nameEn}</small>
          </h1>
          <p>{typeData.attributes.description}</p>

          <ul>
            {
              articles.map((article: any) => (
                <li>
                  <a
                    href={`/${typeData.attributes.slug}/${article.attributes.slug}`}
                  >
                    {article.attributes.title}
                  </a>
                </li>
              ))
            }
          </ul>
        </div>
        <!-- <hr class="mt-8" />
        <Pagination {...pagination} /> -->
      </article>
    </main>
  </body>
</html>
