---
import HeaderNav from "@/components/HeaderNav.astro";
import HeaderMeta from "@/components/HeaderMeta.astro";
import ScrollToTop from "@/components/ScrollToTop.astro";
import Footer from "@/components/Footer.astro";
import { formatDate, toSafeInteger } from "@/utils";
import { SITE_TITLE, SITE_DESCRIPTION, CDN_URL, ESO_API_URL } from "@/consts";
import "@/styles/global.css";

const q = Astro.url.searchParams.get("q") || "";
const klass = Astro.url.searchParams.get("class") || "";
const role = Astro.url.searchParams.get("role") || "";
const attribute = Astro.url.searchParams.get("attribute") || "";

const query = new URLSearchParams();
query.set("pagination[pageSize]", "100");
query.set("populate", "*");
if (q) query.set("filters[$or][0][title][$containsi]", q);
query.set("sort[0]", "id:desc");
if (klass) query.set("filters[class][slug][$eq]", klass);
if (role) query.set("filters[role][slug][$eq]", role);
if (attribute) query.set("filters[attribute][slug][$eq]", attribute);

const response = await fetch(`${ESO_API_URL}/api/builds?${query}`);
const result = await response.json();

if (result.error) {
  return new Response(result.error.message, {
    status: result.error.status,
    statusText: result.error.message,
  });
}

const classList = [
  ["dragonknight", "龙骑士"],
  ["necromancer", "死灵法师"],
  ["nightblade", "夜刃"],
  ["sorcerer", "术士"],
  ["templar", "圣殿骑士"],
  ["warden", "守望者"],
  ["crux", "奥术师"],
];

const roleList = [
  ["damage", "伤害(DPS)"],
  ["tank", "坦克(T)"],
  ["healer", "治疗者(H)"],
];

const attributeList = [
  ["magicka", "魔法"],
  ["stamina", "耐力"],
  ["hybrid", "混合"],
];

const { data = [] } = result;
---

<html lang="zh-CN">
  <head>
    <HeaderMeta title={`构建 - ${SITE_TITLE}`} description={SITE_DESCRIPTION} />
  </head>

  <body>
    <HeaderNav />

    <main class="max-w-screen-xl mx-auto">
      <form id="form-build" action="" class="py-4">
        <div class="grid grid-cols-8 gap-4">
          <div class="col-span-8 sm:col-span-2">
            <input
              type="search"
              name="q"
              id="q"
              autocomplete="off"
              placeholder="搜索..."
              value={q}
              class="filter mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
            />
          </div>
          <div class="col-span-8 sm:col-span-2">
            <select
              id="class"
              name="class"
              class="filter mt-1 block w-full rounded-md border border-gray-300 py-2 px-3 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
            >
              <option value="">所有职业</option>
              {
                classList.map(([v, label]) => (
                  <option selected={v === klass} value={v}>
                    {label}
                  </option>
                ))
              }
            </select>
          </div>
          <div class="col-span-8 sm:col-span-2">
            <select
              id="role"
              name="role"
              class="filter mt-1 block w-full rounded-md border border-gray-300 py-2 px-3 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
            >
              <option value="">所有角色</option>
              {
                roleList.map(([v, label]) => (
                  <option selected={v === role} value={v}>
                    {label}
                  </option>
                ))
              }
            </select>
          </div>
          <div class="col-span-8 sm:col-span-2">
            <select
              id="attribute"
              name="attribute"
              class="filter mt-1 block w-full rounded-md border border-gray-300 py-2 px-3 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
            >
              <option value="">所有属性</option>
              {
                attributeList.map(([v, label]) => (
                  <option selected={v === attribute} value={v}>
                    {label}
                  </option>
                ))
              }
            </select>
          </div>
        </div>
      </form>
      <div class="grid grid-cols-1 md:grid-cols-4">
        <section class="md:col-span-3">
          <ul role="list" class="my-4">
            {
              data.map(({ id, attributes }: any) => (
                <li class="mt-4 overflow-hidden">
                  <div class="block md:flex mt-1 text-gray-900">
                    <div class="md:shrink-0 p-2 h-48 w-full md:h-full md:w-80">
                      <a
                        href={`/build/${attributes.slug}`}
                        class="hover:text-gray-500"
                      >
                        <img
                          class="object-cover"
                          src={attributes.image}
                          alt={attributes.title}
                        />
                      </a>
                    </div>
                    <div class="p-2">
                      <a
                        href={`/build/${attributes.slug}`}
                        class="hover:text-gray-500"
                      >
                        <h2 class="leading-tight text-2xl font-bold">
                          {attributes.title}
                        </h2>
                        <p class="mt-2 text-sm">{attributes.description}</p>
                      </a>
                      <div class="flex flex-wrap mt-4 text-sm">
                        <time datetime={attributes.pubDate}>
                          {formatDate(attributes.pubDate)}
                        </time>
                        {attributes.tags.data.map(({ id, attributes }: any) => (
                          <a
                            href={`#${attributes.name}`}
                            class="mx-1 text-gray-500 hover:text-gray-700"
                          >
                            {attributes.name}
                          </a>
                        ))}
                      </div>
                    </div>
                  </div>
                </li>
              ))
            }
          </ul>
        </section>
      </div>
    </main>
    <!-- <Footer /> -->
    <ScrollToTop />
    <script>
      const form = document.getElementById("form-build") as HTMLFormElement;
      const els = form.querySelectorAll(".filter");
      els.forEach((el) => {
        el.addEventListener("change", () => {
          form.submit();
        });
      });
    </script>
  </body>
</html>
