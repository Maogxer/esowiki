---
import { ESO_API_URL } from "@/consts";
import { md2html, md2text } from "@/utils";
import ArticleLayout from "@/layouts/ArticleLayout.astro";

const { slug } = Astro.params;

/** 任务 */
async function getQuest(slug: string) {
  const query = new URLSearchParams();
  query.set("pagination[pageSize]", "1");
  query.set("pagination[page]", "1");
  query.set("filters[$or][0][name][$eq]", slug!);
  query.set("filters[$or][1][slug][$eq]", slug!);
  // query.set("populate[0]", "rewards");
  // query.set("populate[1]", "steps");
  query.set("populate[location][fields]", "*");
  query.set("populate[rewards][populate][0]", "item");
  query.set("populate[rewards][populate][1]", "skillLine");
  query.set("populate[steps][fields]", "*");
  query.set("populate[steps][populate][0]", "conditions");
  query.set("sort[0]", "steps.stageIndex:asc");
  query.set("sort[1]", "steps.stepIndex:asc");

  const response = await fetch(`${ESO_API_URL}/api/quests?${query}`);
  const result = await response.json();
  const data = result?.data[0];

  return data;
}

const data = await getQuest(slug!);

if (data == null) {
  return new Response(null, {
    status: 404,
    statusText: "Not found",
  });
}

const name = data.attributes.name.replace(/\(.*\)/, "");

let steps: any[] = [];
for (const step of data.attributes.steps.data) {
  if (!step.attributes.text) {
    continue;
  }

  if (steps.find((x: any) => x.attributes.text === step.attributes.text)) {
    continue;
  }

  steps.push(step);
}

const rewards = data.attributes.rewards.data
  .map((reward: any) => {
    if (reward.attributes.type === "金币") {
      return `${reward.attributes.quantity} <a href="/currency/gold">金币</a>`;
    }

    if (reward.attributes.type === "技能点") {
      return `${reward.attributes.quantity} <a href="/skill">技能点</a>`;
    }

    let name = reward.attributes.name;
    const item = reward.attributes.item?.data;
    const skillLine = reward.attributes.skillLine?.data;

    if (item != null) {
      name = `<a href="/item/${item.id}">${item.attributes.name}</a>`;
    } else if (skillLine != null) {
      name = skillLine.attributes.name;
      // TODO: 修复技能线链接
      // name = `<a href="/skill/${skillLine.id}">${skillLine.attributes.name}</a>`;
    }

    if (reward.attributes.quantity > 1) {
      return `${reward.attributes.quantity} ${name}`;
    }

    return name;
  })
  .join("<br/>");

const location = data.attributes.location.data
  ? `<a href="/location/${data.attributes.location.data.attributes.slug}">${data.attributes.location.data.attributes.subZoneName}</a>`
  : data.attributes.locationZone;

const meta = [
  { name: "任务", content: name },
  { name: "英文", content: data.attributes.nameEn },
  { name: "类型", content: data.attributes.type },
  { name: "目标", content: md2text(data.attributes.goalText) },
  { name: "区域", content: data.attributes.zoneName },
  { name: "地点", content: location },
  { name: "奖励", content: rewards },
].filter((item) => item.content != null && item.content !== "");
---

<style is:inline>
  .markdown-body em {
    color: gray;
    font-style: normal;
  }
</style>

<ArticleLayout
  name={name}
  nameEn={data.attributes.nameEn}
  description={md2text(data.attributes.description)}
  type="任务"
  meta={meta}
  search="/quest/list"
>
  <blockquote set:html={md2html(data.attributes.backgroundText)} />
  {
    data.attributes.quick && (
      <>
        <h2 id="quick-walkthrough">快速演练</h2>
        <Fragment set:html={md2html(data.attributes.quick)} />
      </>
    )
  }

  <Fragment set:html={md2html(data.attributes.content)} />

  {
    steps.length > 0 && (
      <>
        <h2 id="steps">任务步骤</h2>
        <ol>
          {steps.map((x: any) => (
            <li>
              <p>
                <Fragment set:html={md2html(x.attributes.text, true)} />
                {x.attributes.conditions.data.length > 1 && (
                  <em>
                    <br />
                    目标: {x.attributes.conditions.data[0]?.attributes?.text}
                  </em>
                )}
              </p>
            </li>
          ))}
        </ol>
      </>
    )
  }
</ArticleLayout>

<script>
  document.querySelectorAll<HTMLDivElement>(".chat").forEach((chat) => {
    chat.querySelectorAll<HTMLParagraphElement>("p").forEach((p) => {
      if (p.querySelector("em") != null) {
        const avatar = document.createElement("span");
        avatar.className = "avatar";
        avatar.textContent = chat.dataset.name?.substring(0, 1) || "?";
        avatar.title = chat.dataset.name || "";
        p.insertBefore(avatar, p.firstChild);
      } else if (p.querySelector("strong") != null) {
        const avatar = document.createElement("img") as HTMLImageElement;
        avatar.className = "avatar";
        avatar.src = "https://eso-cdn.denohub.com/images/justjavac-64.jpg";
        p.insertBefore(avatar, p.firstChild);
        p.classList.add("me");
      } else {
        const avatar = document.createElement("span");
        avatar.className = "avatar";
        avatar.textContent = chat.dataset.name?.substring(0, 1) || "?";
        avatar.title = chat.dataset.name || "";
        const em = document.createElement("em");
        em.innerHTML = p.innerHTML;
        p.innerHTML = "";
        p.appendChild(avatar);
        p.appendChild(em);
      }
    });
  });
</script>
